1. 一个Server实例代表了整个Catalina的Servlet容器
2. 一个Server实例可以关联多个Service, Server接口中提供了对Service的CRUD
3. 一个Service是一组Connector的集合，在Service接口中提供了对Connector的CRUD，
	同时，一个Service需要绑定一个Engine，所以在该Service组下的Connector的请求都是
	通过此Engine来进行处理。

4. Connector---->ProtocolHandler -----> Endpoint ----> Socket (Acceptor线程、Poller轮询线程、worker工作线程)

5. Engine, 是Catalina继承体系中，最顶层的容器Container, 它代表整个Servlet Engine





Engine的child: Host

以下都是在Catalina类中的load方法中需要完成的事：

创建顺序：
1. 创建Server成功！
2. 创建Service成功!
3. 创建Connector成功！
	在创建Connector实例时，会创建protocolHandler--->会创建endpoint实例
4. 创建Engine成功！
5. 创建Host成功！

1. 调用Server的init方法
2. 调用Service的init方法
3. 调用Engine的init方法，在调用此方法时会创建一个startStopExecutor线程池
4. 调用Connector的init方法
	会调用protocolHandler的init方法
		会调用endpoint的init方法

endpoint的init方法要干的事：
4.1. 创建一个ServerSocketChannel实例
    ServerSocketChannelServerSocketChannel serverSock = ServerSocketChannel.open();
4.2. 给ServerSocket绑定监听端口和backlog
	 serverSock.socket().bind(addr, getAcceptCount());
4.3. 设置非阻塞
	   serverSock.configureBlocking(true);
4.4. 创建一个共享的Selector实例
	 SHARED_SELECTOR = Selector.open();

4.5.创建一个NioBlockingSelector实例，它其实是对NIO中Selector进行了功能增强
	// selector: nio中原生的selector
	public void open(Selector selector) {
        sharedSelector = selector;
		// 开启了一个轮询线程
        poller = new BlockPoller();
        poller.selector = sharedSelector;
        poller.setDaemon(true);
        poller.setName("NioBlockingSelector.BlockPoller-"+(threadCounter.getAndIncrement()));
        //启动线程
		poller.start();
    }

以下都是在Catalina类中的start方法中需要完成的事：

1. 调用server.start()，真实情况是调用父类LifecycleBase类中的start()方法，
	然后调用抽象方法startInternal方法，去执行子类的逻辑，
	此处就是调用StandardServer#startInternal()
2. 调用service.start()方法，然后同样是调用父类LifecycleBase类中的start()方法，
	再通过startInternal方法回调子类StandardService中的startInternal()方法
3. 调用engine.start()，因为Engine是Container的子类，
	在调用StandardEngine类中的startInternal()方法时
	会调用父类ContainerBase类中提供的startInternal方法
	3.1 Realm组件启动，即是调用它的start()方法，不重要，跳过
	3.2 Host组件启动，即是调用StandardHost的start()方法 （重要：会进行项目部署）
		3.2.1 调用StandardHost.start()即是调用父类LifecycleBase.start()方法




4. 调用pipeline.start(), StardardPipeline, 会调用它的init方法，再调用startInternal()
	4.1 StardardEngineValue.start()

5. 启动了一个线程去执行ContainerBackgroundProcessor 周期性的回调工作
	Container.backgroundProcess()

6. 调用executor.start()方法，只是executor为null,没有调用，为啥？
7. 调用connector.start()方法---> protocolHandler.start()---->endpoint.start()，很重要了！

	7.1 endpoint.start()方法，具体实现类回调NioEndpoint.startInternal(),在此方法内部会
		做以下几件事：
		（1）创建一个工作线程池，核心线程数10个，最大线程数200，无界队列
		（2）创建两个轮询器线程Poller，最多两个线程
		（3）创建一个Acceptor线程
	7.2 启动一个异步超时线程AsyncTimeout

8. 开启CatalinaShutdownHook线程，并注册
	Runtime.getRuntime().addShutdownHook(shutdownHook);
	调用stop方法，关闭tomcat,最终还是会调到Lifecycle的stop的方法；


	Engine下面有两个子组件： Realm 和 Host
		Host的子组件： Context

通过生命周期监听器HostConfig来完成项目的部署，执行流程：
1. 调用HostConfig.lifecycleEvent(LifecycleEvent event)方法在它的start事件中启动
2. 调用deployApps()方法，在该方法内部实现tomcat的3种部署方式，下面重点记录war包部署的方式
3. 调用deployWARs(File appBase, String[] files)方式，方法内部硬编码过滤出.war结束的文件
	file.toLowerCase(Locale.ENGLISH).endsWith(".war")
4. 通过 startStopExecutor 线程池异步去部署war包，调用deployWar方法
5. 通过反射创建Context实例
	Context context = (Context) Class.forName(contextClass).getConstructor().newInstance();
6. 调用Conext的start方法



Host.addChild(context)---> addChildInternal(context)
--> context.start()---->Lifecycle.start()----> abs startInternal()
---> StandardContext.startInternal()--->ContextConfig.lifecycleEvent(event)
---->  configureStart() --->    Wrapper wrapper = context.createWrapper();



Tomcat中的四种servlet容器

Engine： Catalina的整个engine,包含Host或者Context
Host:    多个Context组成的虚拟Host
Context: 一个具体web应用程序 ，包含一个或多个Wrapper
Wrapper：一个具体的servlet定义，如果实现了SingleThreadModel，可以表示多个Servlet实例

Engine和Host是在Catalina的load方法中完成实例化的
Context和Wrapper是在Catalina的start方法中完成实例化的


Container.java主要api如下：

1. addChild(Container child);
2. Container findChild(String name);
3. addContainerListener(ContainerListener listener);

Lifecycle.java主要api如下：
1. init()
2. start()
3. stop()
4. destroy()
5. addLifecycleListener(LifecycleListener listener);
6. LifecycleListener[] findLifecycleListeners();

Container.java 继承了Lifecycle.java接口


// http11是这样的：
Connector---> ProtocolHandler ---> ConnectionHandler ---> Processor
Connector:连接器
ProtocolHandler: 协议处理器
ConnectionHandler:连接处理器
Processor: 套接字处理器

tomcat的部署流程：
1. tomcat的容器组件在调用startInternal方法时，会找到当前组件的child容器组件，
	然后通过startStopExecutor线程去异步的调用child容器的start生命周期方法;
2. 在start方法中，会根据组件的当前生命周期状态，执行相应的方法和事件操作，
	如当前组件是NEW状态，即会调用init方法；
3. 我们tomcat部署web应用来举例；
	Engine容器在调用startInternal方法时，会找到它的child容器组件Host,然后就会通过
	startStopExecutor线程去执行Host容器生命周期方法start，在start方法中，通过组件的状态
	判断，执行init方法。 在执行init方法时，就会调用setStateInternal方法并执行相应的生命事件，
	此时的事件就是HostConfig事件，即调用HostConfig.lifecycleEvent方法，然后调用start方法，
	完成web应用的部署操作；




Engine容器对应的事件EngineConfig : 基本上是啥事没干
Host容器对应的事件HostConfig： 部署web应用
Context容器对应的事件ContextConfig: 也是复杂了一批




